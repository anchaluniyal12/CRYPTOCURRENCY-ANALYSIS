# -*- coding: utf-8 -*-
"""crypto.analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WizI6633GkS6yy0QBjBE0HeLfrjMdt3H
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv("/content/ADA-USD.csv")

df.shape

"""DATA PREPROCESSING

"""

df.columns

df.tail()

df.tail()

df.isnull().sum()

df.describe()

df.info()

float_columns = df.select_dtypes(include=['float64'])

correlation_matrix=float_columns.corr()
correlation_matrix

df['SMA_50'] = df['Close'].rolling(window=50).mean()

# Calculate the 200-day Simple Moving Average (SMA)
df['SMA_200'] = df['Close'].rolling(window=200).mean()

# Plot the closing prices and SMA
plt.figure(figsize=(14, 7))
plt.plot(df['Date'], df['Close'], label='Close Price')
plt.plot(df['Date'], df['SMA_50'], label='50-Day SMA')
plt.plot(df['Date'], df['SMA_200'], label='200-Day SMA')

# Add labels and legend
plt.xlabel('Date')
plt.ylabel('Price')
plt.title('ADA-USD Closing Prices and Simple Moving Averages')
plt.legend()

# Show the plot
plt.show()

plt.figure(figsize=(14, 7))
plt.plot(df['Date'], df['Close'], label='Close Price')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.title('Cardano (ADA) Closing Price Over Time')
plt.legend()
plt.show()

df['Change'] = df['Close'].diff()

# Calculate gains and losses
df['Gain'] = np.where(df['Change'] > 0, df['Change'], 0)
df['Loss'] = np.where(df['Change'] < 0, -df['Change'], 0)

# Calculate the average gain and loss
window = 14
df['AvgGain'] = df['Gain'].rolling(window=window, min_periods=1).mean()
df['AvgLoss'] = df['Loss'].rolling(window=window, min_periods=1).mean()

# Calculate the Relative Strength (RS)
df['RS'] = df['AvgGain'] / df['AvgLoss']

# Calculate the Relative Strength Index (RSI)
df['RSI'] = 100 - (100 / (1 + df['RS']))

# Drop NaN values (they appear in the beginning due to rolling calculation)
df = df.dropna()

df.head()

plt.subplot(2, 1, 1)
plt.plot(df['Date'], df['Close'], label='Close Price')
plt.title('ADA-USD Closing Prices')
plt.legend()

# Plot RSI
plt.subplot(2, 1, 2)
plt.plot(df['Date'], df['RSI'], label='RSI', color='orange')
plt.axhline(70, color='red', linestyle='--')
plt.axhline(30, color='green', linestyle='--')
plt.title('Relative Strength Index (RSI)')
plt.legend()

# Show the plot
plt.tight_layout()
plt.show()

short_window = 12
long_window = 26
signal_window = 9
df['EMA_12'] = df['Close'].ewm(span=short_window, adjust=False).mean()
df['EMA_26'] = df['Close'].ewm(span=long_window, adjust=False).mean()

# Calculate the MACD line (difference between the two EMAs)
df['MACD'] = df['EMA_12'] - df['EMA_26']

# Calculate the Signal line (EMA of the MACD line)
df['Signal_Line'] = df['MACD'].ewm(span=signal_window, adjust=False).mean()

# Calculate the MACD histogram (difference between the MACD line and the Signal line)
df['MACD_Histogram'] = df['MACD'] - df['Signal_Line']

plt.subplot(3, 1, 2)
plt.plot(df['Date'], df['MACD'], label='MACD', color='blue')
plt.plot(df['Date'], df['Signal_Line'], label='Signal Line', color='red')
plt.title('MACD and Signal Line')
plt.legend()

# Plot MACD Histogram
plt.subplot(3, 1, 3)
plt.bar(df['Date'], df['MACD_Histogram'], label='MACD Histogram', color='gray')
plt.axhline(0, color='black', linestyle='--')
plt.title('MACD Histogram')
plt.legend()

# Show the plot
plt.tight_layout()
plt.show()

period = 14

# Calculate the ROC
df['ROC'] = ((df['Close'] - df['Close'].shift(period)) / df['Close'].shift(period)) * 100

# Drop NaN values that appear due to the shifting operation
df = df.dropna()

# Plot the data
plt.figure(figsize=(14, 7))

# Plot Closing Prices
plt.subplot(2, 1, 1)
plt.plot(df['Date'], df['Close'], label='Close Price', color='blue')
plt.title('ADA-USD Closing Prices')
plt.legend()

# Plot ROC
plt.subplot(2, 1, 2)
plt.plot(df['Date'], df['ROC'], label='ROC', color='orange')
plt.axhline(0, color='black', linestyle='--')
plt.title(f'Rate of Change (ROC) - {period}-day')
plt.legend()

# Show the plot
plt.tight_layout()
plt.show()

plt.subplot(3, 1, 2)
plt.plot(df['Date'], df['MACD'], label='MACD', color='blue')
plt.plot(df['Date'], df['Signal_Line'], label='Signal Line', color='red')
plt.title('MACD and Signal Line')
plt.legend()

# Plot MACD Histogram
plt.subplot(3, 1, 3)
plt.bar(df['Date'], df['MACD_Histogram'], label='MACD Histogram', color='gray')
plt.axhline(0, color='black', linestyle='--')
plt.title('MACD Histogram')
plt.legend()

# Show the plot
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 7))
plt.plot(df['Date'], df['Volume'], label='Volume', color='orange')
plt.xlabel('Date')
plt.ylabel('Volume')
plt.title('Cardano (ADA) Trading Volume Over Time')
plt.legend()
plt.show()

plt.figure(figsize=(14, 7))
plt.plot(df['Date'], df['Volume'], label='Volume', color='orange')
plt.xlabel('Date')
plt.ylabel('Volume')
plt.title('Cardano (ADA) Trading Volume Over Time')
plt.legend()
plt.grid(True)
plt.gca().xaxis.set_major_locator(plt.MaxNLocator(10))  # Limit the number of x-axis labels
plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%Y-%m-%d'))
plt.gcf().autofmt_xdate()  # Auto-format the dates for better readability
plt.show()

plt.figure(figsize=(10, 5))
sns.histplot(df['Close'], kde=True, bins=50)
plt.title('Distribution of Cardano (ADA) Closing Prices')
plt.xlabel('Close Price')
plt.ylabel('Frequency')
plt.show()

import matplotlib.dates as mpl_dates
fig, ax = plt.subplots(figsize=(20,8))
ax.plot(df['Date'], df['Close'], color='Red')
ax.xaxis.set_major_locator(plt.MaxNLocator(15))
ax.set_xlabel('Date', fontsize='11')
ax.set_ylabel('Price in USD', fontsize='11')
plt.title('Cardano Stock Prices', fontsize='28')
plt.grid()
plt.show()

fig, ax = plt.subplots(figsize=(20,8))
ax.plot(df['Date'], df['Volume'], color='Red')
ax.xaxis.set_major_locator(plt.MaxNLocator(15))
ax.set_xlabel('Date', fontsize='11')
ax.set_ylabel('Price in USD', fontsize='11')
plt.title('Cardano (ADA) Trading Volume Over Time', fontsize='28')
plt.grid()
plt.show()

sns.kdeplot(df['High'], fill=True, color='green', label='High Prices')

# Plot density for 'Low' prices
sns.kdeplot(df['Low'], fill=True, color='red', label='Low Prices')

# Customize the plot
plt.xlabel('Price')
plt.ylabel('Density')
plt.title('Density Plot of Cardano (ADA) High and Low Prices')
plt.legend()
plt.grid(True)
plt.show()

high_max = df['High'].max()
high_min = df['High'].min()

low_max = df['Low'].max()
low_min = df['Low'].min()

close_max = df['Close'].max()
close_min = df['Close'].min()

# Print the results
print(f"Highest value of High: {high_max}")
print(f"Lowest value of High: {high_min}")

print(f"Highest value of Low: {low_max}")
print(f"Lowest value of Low: {low_min}")

print(f"Highest value of Close: {close_max}")
print(f"Lowest value of Close: {close_min}")

corr_matrix = df[['Open', 'High', 'Low', 'Close', 'Volume']].corr()

# Plot correlation heatmap
plt.figure(figsize=(10, 7))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Matrix')
plt.show()

df.iloc[df['Close'].argmax()]

df['Market Capitalization'] = df['Open'] * df['Volume']

df.head()

fig, ax = plt.subplots(figsize=(20,8))
ax.plot(df['Date'], df['Market Capitalization'], color='Red')
ax.xaxis.set_major_locator(plt.MaxNLocator(15))
ax.set_xlabel('Date', fontsize='11')
ax.set_ylabel('Price in USD', fontsize='11')
plt.title('Cardano (ADA) Market capitalization over time', fontsize='28')
plt.grid()
plt.show()

df['volatility'] = (df['Close'] / df['Close'].shift(1))

df.head()

plt.figure(figsize=(14, 7))
plt.plot(df['Date'], df['volatility'], label='30-Day Rolling Volatility', color='red')
plt.xlabel('Date')
plt.ylabel('Volatility')
plt.title('Cardano (ADA) Volatility Over Time')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(12, 6))
plt.hist(df['volatility'], bins=50, color='orange', edgecolor='black', alpha=0.7)
plt.xlabel('Volatility')
plt.ylabel('Frequency')
plt.title('Histogram of Cardano (ADA) Volatility')
plt.grid(True)
plt.show()

df['Return'] = df['Close'].pct_change()

# Calculate cumulative returns
df['Cumulative_Return'] = (1 + df['Return']).cumprod() - 1

# Plot cumulative returns
plt.figure(figsize=(14, 7))
plt.plot(df['Date'], df['Cumulative_Return'], label='Cumulative Return', color='blue')
plt.xlabel('Date')
plt.ylabel('Cumulative Return')
plt.title('Cumulative Return of Cardano (ADA)')
plt.legend()
plt.grid(True)
plt.show()

